// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal.proto

/*
	Package internal is a generated protocol buffer package.

	It is generated from these files:
		internal.proto

	It has these top-level messages:
		ModelInfo
		RunInfo
		Model
*/
package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Model_StatusType int32

const (
	Model_QUEUED    Model_StatusType = 0
	Model_RUNNING   Model_StatusType = 1
	Model_COMPLETED Model_StatusType = 2
)

var Model_StatusType_name = map[int32]string{
	0: "QUEUED",
	1: "RUNNING",
	2: "COMPLETED",
}
var Model_StatusType_value = map[string]int32{
	"QUEUED":    0,
	"RUNNING":   1,
	"COMPLETED": 2,
}

func (x Model_StatusType) String() string {
	return proto.EnumName(Model_StatusType_name, int32(x))
}
func (Model_StatusType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInternal, []int{2, 0} }

type ModelInfo struct {
	ModelPath   string                 `protobuf:"bytes,1,opt,name=model_path,json=modelPath,proto3" json:"model_path,omitempty"`
	RunSettings *ModelInfo_RunSettings `protobuf:"bytes,2,opt,name=run_settings,json=runSettings" json:"run_settings,omitempty"`
}

func (m *ModelInfo) Reset()                    { *m = ModelInfo{} }
func (m *ModelInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelInfo) ProtoMessage()               {}
func (*ModelInfo) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

func (m *ModelInfo) GetModelPath() string {
	if m != nil {
		return m.ModelPath
	}
	return ""
}

func (m *ModelInfo) GetRunSettings() *ModelInfo_RunSettings {
	if m != nil {
		return m.RunSettings
	}
	return nil
}

type ModelInfo_RunSettings struct {
	Git                bool   `protobuf:"varint,1,opt,name=git,proto3" json:"git,omitempty"`
	SaveExe            string `protobuf:"bytes,2,opt,name=save_exe,json=saveExe,proto3" json:"save_exe,omitempty"`
	Verbose            bool   `protobuf:"varint,3,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Debug              bool   `protobuf:"varint,4,opt,name=debug,proto3" json:"debug,omitempty"`
	CleanLvl           int32  `protobuf:"varint,5,opt,name=clean_lvl,json=cleanLvl,proto3" json:"clean_lvl,omitempty"`
	CopyLvl            int32  `protobuf:"varint,6,opt,name=copy_lvl,json=copyLvl,proto3" json:"copy_lvl,omitempty"`
	CacheDir           string `protobuf:"bytes,7,opt,name=cache_dir,json=cacheDir,proto3" json:"cache_dir,omitempty"`
	ExeNameInCache     string `protobuf:"bytes,8,opt,name=exe_name_in_cache,json=exeNameInCache,proto3" json:"exe_name_in_cache,omitempty"`
	NmExecutableOrPath string `protobuf:"bytes,9,opt,name=nm_executable_or_path,json=nmExecutableOrPath,proto3" json:"nm_executable_or_path,omitempty"`
}

func (m *ModelInfo_RunSettings) Reset()                    { *m = ModelInfo_RunSettings{} }
func (m *ModelInfo_RunSettings) String() string            { return proto.CompactTextString(m) }
func (*ModelInfo_RunSettings) ProtoMessage()               {}
func (*ModelInfo_RunSettings) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0, 0} }

func (m *ModelInfo_RunSettings) GetGit() bool {
	if m != nil {
		return m.Git
	}
	return false
}

func (m *ModelInfo_RunSettings) GetSaveExe() string {
	if m != nil {
		return m.SaveExe
	}
	return ""
}

func (m *ModelInfo_RunSettings) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *ModelInfo_RunSettings) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *ModelInfo_RunSettings) GetCleanLvl() int32 {
	if m != nil {
		return m.CleanLvl
	}
	return 0
}

func (m *ModelInfo_RunSettings) GetCopyLvl() int32 {
	if m != nil {
		return m.CopyLvl
	}
	return 0
}

func (m *ModelInfo_RunSettings) GetCacheDir() string {
	if m != nil {
		return m.CacheDir
	}
	return ""
}

func (m *ModelInfo_RunSettings) GetExeNameInCache() string {
	if m != nil {
		return m.ExeNameInCache
	}
	return ""
}

func (m *ModelInfo_RunSettings) GetNmExecutableOrPath() string {
	if m != nil {
		return m.NmExecutableOrPath
	}
	return ""
}

type RunInfo struct {
	QueueTime int64  `protobuf:"varint,1,opt,name=queue_time,json=queueTime,proto3" json:"queue_time,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration  int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	RunDir    string `protobuf:"bytes,4,opt,name=run_dir,json=runDir,proto3" json:"run_dir,omitempty"`
}

func (m *RunInfo) Reset()                    { *m = RunInfo{} }
func (m *RunInfo) String() string            { return proto.CompactTextString(m) }
func (*RunInfo) ProtoMessage()               {}
func (*RunInfo) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{1} }

func (m *RunInfo) GetQueueTime() int64 {
	if m != nil {
		return m.QueueTime
	}
	return 0
}

func (m *RunInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RunInfo) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *RunInfo) GetRunDir() string {
	if m != nil {
		return m.RunDir
	}
	return ""
}

type Model struct {
	Id        int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status    Model_StatusType `protobuf:"varint,2,opt,name=status,proto3,enum=internal.Model_StatusType" json:"status,omitempty"`
	ModelInfo *ModelInfo       `protobuf:"bytes,3,opt,name=model_info,json=modelInfo" json:"model_info,omitempty"`
	RunInfo   *RunInfo         `protobuf:"bytes,4,opt,name=run_info,json=runInfo" json:"run_info,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (m *Model) String() string            { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{2} }

func (m *Model) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model) GetStatus() Model_StatusType {
	if m != nil {
		return m.Status
	}
	return Model_QUEUED
}

func (m *Model) GetModelInfo() *ModelInfo {
	if m != nil {
		return m.ModelInfo
	}
	return nil
}

func (m *Model) GetRunInfo() *RunInfo {
	if m != nil {
		return m.RunInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ModelInfo)(nil), "internal.ModelInfo")
	proto.RegisterType((*ModelInfo_RunSettings)(nil), "internal.ModelInfo.RunSettings")
	proto.RegisterType((*RunInfo)(nil), "internal.RunInfo")
	proto.RegisterType((*Model)(nil), "internal.Model")
	proto.RegisterEnum("internal.Model_StatusType", Model_StatusType_name, Model_StatusType_value)
}
func (m *ModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModelPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ModelPath)))
		i += copy(dAtA[i:], m.ModelPath)
	}
	if m.RunSettings != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RunSettings.Size()))
		n1, err := m.RunSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ModelInfo_RunSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelInfo_RunSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Git {
		dAtA[i] = 0x8
		i++
		if m.Git {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SaveExe) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.SaveExe)))
		i += copy(dAtA[i:], m.SaveExe)
	}
	if m.Verbose {
		dAtA[i] = 0x18
		i++
		if m.Verbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debug {
		dAtA[i] = 0x20
		i++
		if m.Debug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CleanLvl != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CleanLvl))
	}
	if m.CopyLvl != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CopyLvl))
	}
	if len(m.CacheDir) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.CacheDir)))
		i += copy(dAtA[i:], m.CacheDir)
	}
	if len(m.ExeNameInCache) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ExeNameInCache)))
		i += copy(dAtA[i:], m.ExeNameInCache)
	}
	if len(m.NmExecutableOrPath) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.NmExecutableOrPath)))
		i += copy(dAtA[i:], m.NmExecutableOrPath)
	}
	return i, nil
}

func (m *RunInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueueTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.QueueTime))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StartTime))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Duration))
	}
	if len(m.RunDir) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.RunDir)))
		i += copy(dAtA[i:], m.RunDir)
	}
	return i, nil
}

func (m *Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Id))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status))
	}
	if m.ModelInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ModelInfo.Size()))
		n2, err := m.ModelInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RunInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RunInfo.Size()))
		n3, err := m.RunInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64Internal(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Internal(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintInternal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ModelInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModelPath)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.RunSettings != nil {
		l = m.RunSettings.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ModelInfo_RunSettings) Size() (n int) {
	var l int
	_ = l
	if m.Git {
		n += 2
	}
	l = len(m.SaveExe)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Verbose {
		n += 2
	}
	if m.Debug {
		n += 2
	}
	if m.CleanLvl != 0 {
		n += 1 + sovInternal(uint64(m.CleanLvl))
	}
	if m.CopyLvl != 0 {
		n += 1 + sovInternal(uint64(m.CopyLvl))
	}
	l = len(m.CacheDir)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.ExeNameInCache)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.NmExecutableOrPath)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RunInfo) Size() (n int) {
	var l int
	_ = l
	if m.QueueTime != 0 {
		n += 1 + sovInternal(uint64(m.QueueTime))
	}
	if m.StartTime != 0 {
		n += 1 + sovInternal(uint64(m.StartTime))
	}
	if m.Duration != 0 {
		n += 1 + sovInternal(uint64(m.Duration))
	}
	l = len(m.RunDir)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *Model) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInternal(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovInternal(uint64(m.Status))
	}
	if m.ModelInfo != nil {
		l = m.ModelInfo.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.RunInfo != nil {
		l = m.RunInfo.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func sovInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RunSettings == nil {
				m.RunSettings = &ModelInfo_RunSettings{}
			}
			if err := m.RunSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelInfo_RunSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Git", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Git = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveExe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaveExe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verbose = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CleanLvl", wireType)
			}
			m.CleanLvl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CleanLvl |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyLvl", wireType)
			}
			m.CopyLvl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CopyLvl |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExeNameInCache", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExeNameInCache = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NmExecutableOrPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NmExecutableOrPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueTime", wireType)
			}
			m.QueueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Model_StatusType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelInfo == nil {
				m.ModelInfo = &ModelInfo{}
			}
			if err := m.ModelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RunInfo == nil {
				m.RunInfo = &RunInfo{}
			}
			if err := m.RunInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("internal.proto", fileDescriptorInternal) }

var fileDescriptorInternal = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xad, 0x9d, 0x26, 0xb6, 0x27, 0xdf, 0x17, 0xa5, 0x0b, 0x08, 0x53, 0x44, 0x88, 0x72, 0x15,
	0x24, 0x14, 0x89, 0xc0, 0x13, 0xb4, 0xb1, 0x50, 0xa4, 0x36, 0x2d, 0xdb, 0xe4, 0xda, 0xda, 0xc4,
	0xd3, 0x64, 0x25, 0x7b, 0x1d, 0xd6, 0xeb, 0x28, 0x95, 0x78, 0x06, 0xae, 0xb9, 0xe1, 0x7d, 0xb8,
	0xe4, 0x11, 0x50, 0xfa, 0x22, 0x68, 0x27, 0x7f, 0x08, 0x71, 0xe7, 0x73, 0xce, 0xcc, 0xce, 0xcf,
	0x19, 0x43, 0x43, 0x2a, 0x83, 0x5a, 0x89, 0xb4, 0xb7, 0xd4, 0xb9, 0xc9, 0x99, 0xbf, 0xc7, 0x9d,
	0xaf, 0x15, 0x08, 0xae, 0xf3, 0x04, 0xd3, 0xa1, 0xba, 0xcf, 0xd9, 0x2b, 0x80, 0xcc, 0x82, 0x78,
	0x29, 0xcc, 0x22, 0x74, 0xda, 0x4e, 0x37, 0xe0, 0x01, 0x31, 0xb7, 0xc2, 0x2c, 0xd8, 0x05, 0xfc,
	0xa7, 0x4b, 0x15, 0x17, 0x68, 0x8c, 0x54, 0xf3, 0x22, 0x74, 0xdb, 0x4e, 0xb7, 0xde, 0x7f, 0xdd,
	0x3b, 0xbc, 0x7e, 0x78, 0xa9, 0xc7, 0x4b, 0x75, 0xb7, 0x0b, 0xe3, 0x75, 0x7d, 0x04, 0xe7, 0xdf,
	0x5d, 0xa8, 0xff, 0x21, 0xb2, 0x26, 0x54, 0xe6, 0xd2, 0x50, 0x2d, 0x9f, 0xdb, 0x4f, 0xf6, 0x02,
	0xfc, 0x42, 0xac, 0x30, 0xc6, 0x35, 0x52, 0x85, 0x80, 0x7b, 0x16, 0x47, 0x6b, 0x64, 0x21, 0x78,
	0x2b, 0xd4, 0xd3, 0xbc, 0xc0, 0xb0, 0x42, 0x09, 0x7b, 0xc8, 0x9e, 0x42, 0x35, 0xc1, 0x69, 0x39,
	0x0f, 0x4f, 0x89, 0xdf, 0x02, 0xf6, 0x12, 0x82, 0x59, 0x8a, 0x42, 0xc5, 0xe9, 0x2a, 0x0d, 0xab,
	0x6d, 0xa7, 0x5b, 0xe5, 0x3e, 0x11, 0x57, 0xab, 0xd4, 0xd6, 0x99, 0xe5, 0xcb, 0x07, 0xd2, 0x6a,
	0xa4, 0x79, 0x16, 0x5b, 0xc9, 0xe6, 0x89, 0xd9, 0x02, 0xe3, 0x44, 0xea, 0xd0, 0xa3, 0x1e, 0x7c,
	0x22, 0x06, 0x52, 0xb3, 0x37, 0x70, 0x86, 0x6b, 0x8c, 0x95, 0xc8, 0x30, 0x96, 0x2a, 0x26, 0x3e,
	0xf4, 0x29, 0xa8, 0x81, 0x6b, 0x1c, 0x89, 0x0c, 0x87, 0xea, 0xd2, 0xb2, 0xec, 0x1d, 0x3c, 0x53,
	0x99, 0x1d, 0x64, 0x56, 0x1a, 0x31, 0x4d, 0x31, 0xce, 0xf5, 0x76, 0xb5, 0x01, 0x85, 0x33, 0x95,
	0x45, 0x07, 0xed, 0x46, 0xdb, 0x1d, 0x77, 0xbe, 0x80, 0xc7, 0x4b, 0xb5, 0x77, 0xe3, 0x73, 0x89,
	0x25, 0xc6, 0x46, 0x66, 0x48, 0x1b, 0xaa, 0xf0, 0x80, 0x98, 0xb1, 0xcc, 0xd0, 0xca, 0x85, 0x11,
	0xda, 0x6c, 0x65, 0x77, 0x2b, 0x13, 0x43, 0xf2, 0x39, 0xf8, 0x49, 0xa9, 0x85, 0x91, 0xb9, 0xa2,
	0x65, 0x55, 0xf8, 0x01, 0xb3, 0xe7, 0xe0, 0x59, 0x23, 0xed, 0x74, 0xa7, 0xd4, 0x49, 0x4d, 0x97,
	0x6a, 0x20, 0x75, 0xe7, 0xd1, 0x81, 0x2a, 0x99, 0xc8, 0x1a, 0xe0, 0xca, 0x64, 0x57, 0xd4, 0x95,
	0x09, 0xeb, 0x43, 0xad, 0x30, 0xc2, 0x94, 0x5b, 0xd7, 0x1b, 0xfd, 0xf3, 0xbf, 0x5c, 0xef, 0xdd,
	0x91, 0x3a, 0x7e, 0x58, 0x22, 0xdf, 0x45, 0xb2, 0xfe, 0xfe, 0x9c, 0xa4, 0xba, 0xcf, 0xa9, 0x89,
	0x7a, 0xff, 0xc9, 0x3f, 0xae, 0x65, 0x77, 0x63, 0x34, 0xf4, 0x5b, 0xf0, 0x6d, 0x6b, 0x94, 0x71,
	0x4a, 0x19, 0x67, 0xc7, 0x8c, 0xdd, 0x66, 0xb8, 0xed, 0xde, 0x7e, 0x74, 0x3e, 0x00, 0x1c, 0xeb,
	0x32, 0x80, 0xda, 0xa7, 0x49, 0x34, 0x89, 0x06, 0xcd, 0x13, 0x56, 0x07, 0x8f, 0x4f, 0x46, 0xa3,
	0xe1, 0xe8, 0x63, 0xd3, 0x61, 0xff, 0x43, 0x70, 0x79, 0x73, 0x7d, 0x7b, 0x15, 0x8d, 0xa3, 0x41,
	0xd3, 0xbd, 0x68, 0xfe, 0xd8, 0xb4, 0x9c, 0x9f, 0x9b, 0x96, 0xf3, 0x6b, 0xd3, 0x72, 0xbe, 0x3d,
	0xb6, 0x4e, 0xa6, 0x35, 0xfa, 0x2f, 0xde, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xca, 0x1f,
	0xd9, 0x29, 0x03, 0x00, 0x00,
}
