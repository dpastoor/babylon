package parser

import "fmt"

// diagPerLowerTriParams provides the number
// of diagonal elements given a lower triangle
// structure of parameter estimates
// For example given the structure
// 1
// 2 3
// there are 3 values and 2 diagonal elements
var lowerDiagonalLengthToDimension = map[int]int{
	0:     0,
	1:     1,
	3:     2,
	6:     3,
	10:    4,
	15:    5,
	21:    6,
	28:    7,
	36:    8,
	45:    9,
	55:    10,
	66:    11,
	78:    12,
	91:    13,
	105:   14,
	120:   15,
	136:   16,
	153:   17,
	171:   18,
	190:   19,
	210:   20,
	231:   21,
	253:   22,
	276:   23,
	300:   24,
	325:   25,
	351:   26,
	378:   27,
	406:   28,
	435:   29,
	465:   30,
	496:   31,
	528:   32,
	561:   33,
	595:   34,
	630:   35,
	666:   36,
	703:   37,
	741:   38,
	780:   39,
	820:   40,
	861:   41,
	903:   42,
	946:   43,
	990:   44,
	1035:  45,
	1081:  46,
	1128:  47,
	1176:  48,
	1225:  49,
	1275:  50,
	1326:  51,
	1378:  52,
	1431:  53,
	1485:  54,
	1540:  55,
	1596:  56,
	1653:  57,
	1711:  58,
	1770:  59,
	1830:  60,
	1891:  61,
	1953:  62,
	2016:  63,
	2080:  64,
	2145:  65,
	2211:  66,
	2278:  67,
	2346:  68,
	2415:  69,
	2485:  70,
	2556:  71,
	2628:  72,
	2701:  73,
	2775:  74,
	2850:  75,
	2926:  76,
	3003:  77,
	3081:  78,
	3160:  79,
	3240:  80,
	3321:  81,
	3403:  82,
	3486:  83,
	3570:  84,
	3655:  85,
	3741:  86,
	3828:  87,
	3916:  88,
	4005:  89,
	4095:  90,
	4186:  91,
	4278:  92,
	4371:  93,
	4465:  94,
	4560:  95,
	4656:  96,
	4753:  97,
	4851:  98,
	4950:  99,
	5050:  100,
	5151:  101,
	5253:  102,
	5356:  103,
	5460:  104,
	5565:  105,
	5671:  106,
	5778:  107,
	5886:  108,
	5995:  109,
	6105:  110,
	6216:  111,
	6328:  112,
	6441:  113,
	6555:  114,
	6670:  115,
	6786:  116,
	6903:  117,
	7021:  118,
	7140:  119,
	7260:  120,
	7381:  121,
	7503:  122,
	7626:  123,
	7750:  124,
	7875:  125,
	8001:  126,
	8128:  127,
	8256:  128,
	8385:  129,
	8515:  130,
	8646:  131,
	8778:  132,
	8911:  133,
	9045:  134,
	9180:  135,
	9316:  136,
	9453:  137,
	9591:  138,
	9730:  139,
	9870:  140,
	10011: 141,
	10153: 142,
	10296: 143,
	10440: 144,
	10585: 145,
	10731: 146,
	10878: 147,
	11026: 148,
	11175: 149,
	11325: 150,
	11476: 151,
	11628: 152,
	11781: 153,
	11935: 154,
	12090: 155,
	12246: 156,
	12403: 157,
	12561: 158,
	12720: 159,
	12880: 160,
	13041: 161,
	13203: 162,
	13366: 163,
	13530: 164,
	13695: 165,
	13861: 166,
	14028: 167,
	14196: 168,
	14365: 169,
	14535: 170,
	14706: 171,
	14878: 172,
	15051: 173,
	15225: 174,
	15400: 175,
	15576: 176,
	15753: 177,
	15931: 178,
	16110: 179,
	16290: 180,
	16471: 181,
	16653: 182,
	16836: 183,
	17020: 184,
	17205: 185,
	17391: 186,
	17578: 187,
	17766: 188,
	17955: 189,
	18145: 190,
	18336: 191,
	18528: 192,
	18721: 193,
	18915: 194,
	19110: 195,
	19306: 196,
	19503: 197,
	19701: 198,
	19900: 199,
	20100: 200,
	20301: 201,
	20503: 202,
	20706: 203,
	20910: 204,
	21115: 205,
	21321: 206,
	21528: 207,
	21736: 208,
	21945: 209,
	22155: 210,
	22366: 211,
	22578: 212,
	22791: 213,
	23005: 214,
	23220: 215,
	23436: 216,
	23653: 217,
	23871: 218,
	24090: 219,
	24310: 220,
	24531: 221,
	24753: 222,
	24976: 223,
	25200: 224,
	25425: 225,
	25651: 226,
	25878: 227,
	26106: 228,
	26335: 229,
	26565: 230,
	26796: 231,
	27028: 232,
	27261: 233,
	27495: 234,
	27730: 235,
	27966: 236,
	28203: 237,
	28441: 238,
	28680: 239,
	28920: 240,
	29161: 241,
	29403: 242,
	29646: 243,
	29890: 244,
	30135: 245,
	30381: 246,
	30628: 247,
	30876: 248,
	31125: 249,
	31375: 250,
	31626: 251,
	31878: 252,
	32131: 253,
	32385: 254,
	32640: 255,
	32896: 256,
	33153: 257,
	33411: 258,
	33670: 259,
	33930: 260,
	34191: 261,
	34453: 262,
	34716: 263,
	34980: 264,
	35245: 265,
	35511: 266,
	35778: 267,
	36046: 268,
	36315: 269,
	36585: 270,
	36856: 271,
	37128: 272,
	37401: 273,
	37675: 274,
	37950: 275,
	38226: 276,
	38503: 277,
	38781: 278,
	39060: 279,
	39340: 280,
	39621: 281,
	39903: 282,
	40186: 283,
	40470: 284,
	40755: 285,
	41041: 286,
	41328: 287,
	41616: 288,
	41905: 289,
	42195: 290,
	42486: 291,
	42778: 292,
	43071: 293,
	43365: 294,
	43660: 295,
	43956: 296,
	44253: 297,
	44551: 298,
	44850: 299,
	45150: 300,
}

func IndexAndIsDiag(i int) (int, bool) {
	res, isdiag := lowerDiagonalLengthToDimension[i+1]
	return res, isdiag
}

// GetDiagonalIndices returns the indices of the diagonal elements
// given a []int that represents which matrix various elements exist in
// for example 1 0 2 0 0 3 would represent 3 diagonal elements
// from something like $OMEGA 0.04 0.04 0.04
// this function should return []int{0, 2, 5}
//
// for full block matrices will get something like 1 2 2 2
// $OMEGA 0.04
// $OMEGA BLOCK(2)
// 0.04
// 0.001 0.04
// and should return []int{0, 1, 3}
func GetDiagonalIndices(el []int) []int {
	if len(el) == 0 {
		return []int{}
	}
	var diagElements []int
	for index := range el {
		_, ok := IndexAndIsDiag(index)
		if ok {
			diagElements = append(diagElements, index)
		}
	}
	return diagElements
}

// GetBlockParameterNames builds a slice of parameter names
// len is the number of elements in a lower triangular matrix
// len is converted to the dimension of the full matrix
// dimension = n, of a nxn block matrix
func GetBlockParameterNames(name string, len int) []string {
	var ret []string
	dim := lowerDiagonalLengthToDimension[len]
	for i := 1; i <= dim; i++ {
		for j := 1; j <= dim; j++ {
			if i >= j {
				ret = append(ret, fmt.Sprintf("%s(%d,%d)", name, i, j))
			}
		}
	}
	return ret
}
