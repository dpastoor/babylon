{
  "project" : "bbi",
  "release" : "v3.0.0",
  "scope" : "A next-generation modeling tool that allows for local and grid-based execution of NonMem jobs. Supports legacy functionality such as NMQual execution mode and the ability to pass raw options to NMFE. Self-bootstrapping, bbi can evaluate your environment to locate Nonmem locations and codify them into configuration",
  "markdown" : [
    {
      "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/expectations.md"
    }
  ],
  "stories" : [
    {
      "name" : "Run NonMem jobs locally",
      "tags" : [
        "TestBbiCompletesLocalExecution",
        "TestBbiParallelExecution"
      ],
      "risk" : "high",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/run_jobs_locally.md"
        }
      ]
    },
    {
      "name" : "Run NonMem jobs on the Grid",
      "tags" : [
        "TestBbiCompletesSGEExecution",
        "TestBbiCompletesParallelSGEExecution"
      ],
      "risk" : "high",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/run_jobs_on_grid.md"
        }
      ]
    },
    {
      "name" : "Notify about issues with the data referenced in the control stream",
      "tags" : [
        "TestHasValidPathForCTL",
        "TestHasInvalidDataPath",
        "TestHasValidComplexPathCTLAndMod"
      ],
      "risk" : "low",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/invalid_data.md"
        }
      ]
    },
    {
      "name" : "Initialize a project with minimum configs required for execution",
      "tags" : [
        "TestInitialization"
      ],
      "risk" : "medium",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/project_initialization.md"
        }
      ]
    },
    {
      "name" : "Pass NMFE options directly to NonMem",
      "tags" : [
        "TestNMFEOptionsEndInScript"
      ],
      "risk" : "low",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/nmfe_options.md"
        }
      ]
    },
    {
      "name" : "Capture all configurations and write to a file",
      "tags" : [
        "TestBBIConfigJSONCreated"
      ],
      "risk" : "high",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/store_configuration.md"
        }
      ]
    },
    {
      "name" : "NonMem Execution via NMQual",
      "tags" : [
        "TestNMQUALExecutionSucceeds"
      ],
      "risk" : "low",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/nmqual_execution.md"
        }
      ]
    },
    {
      "name" : "Parse model output folder",
      "tags" : [
        "TestSummaryHappyPath",
        "TestSummaryArgs",
        "TestSummaryErrors",
        "TestSummaryHappyPathNoExtension"

      ],
      "risk" : "medium",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/bbi_summary.md"
        }
      ]
    },
    {
      "name" : "Parse .cov and .cor files",
      "tags" : [
        "TestCovCorHappyPath",
        "TestCovCorErrors"

      ],
      "risk" : "low",
      "markdown" : [
        {
          "source" : "https://raw.githubusercontent.com/metrumresearchgroup/babylontest/master/markdown/stories/bbi_covcor.md"
        }
      ]
    }
  ]
}