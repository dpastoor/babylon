---
kind: pipeline
type: exec
name: Babylon Testing

platform:
  os: linux
  arch: amd64

global_variables:
  SGE: &sge_environment
    SGE_CELL: default
    SGE_EXECD_PORT: 6445
    SGE_ROOT: /opt/sge
    SGE_ARCH: lx-amd64
    SGE_QMASTER_PORT: 6444
    SGE_CLUSTER_NAME: p6444
  SGE_PATH: &sge_path /usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/data/apps

steps:
  - name: Sanity and Cleanup
    volumes:
      - name: tmp
        path: /tmp
    commands:
      - if [ -d /tmp/babylontest ] ; then rm -rf /tmp/babylontest; fi
  - name: Build Babylon
    commands:
      - go build -o bbi cmd/bbi/main.go
      - ./bbi version
  - name: Get BabylonTest
    environment:
      BABYLONTEST_BRANCH: feature/full_sge_testing
    volumes:
      - name: tmp
        path: /tmp
    commands:
      - git clone https://github.com/metrumresearchgroup/babylontest.git /tmp/babylontest
      - cd /tmp/babylontest
      - if [ ! -z $BABYLONTEST_BRANCH ]; then git checkout $BABYLONTEST_BRANCH; fi
  - name: Test
    environment:
      <<: *sge_environment
      PATH: *sge_path
      MPIEXEC_PATH: /usr/bin/mpiexec
      NONMEMROOT: /opt/NONMEM
      NMVERSION: nm74gf
      SGE: true
      POST_EXECUTION: true
      NMQUAL: true
    volumes:
      - name: nonmem
        path: /opt/NONMEM
      - name: tmp
        path: /tmp
    commands:
      #Move the built BBI binary into path
      - if [ ! -d /data/apps ] ; then mkdir /data/apps; chmod -R 0755 /data/apps; cp bbi /data/apps; fi
      - sudo cp bbi /usr/local/bin
      - cd /tmp/babylontest
      - bbi init --dir /opt/NONMEM
      - go test ./... -v --json | tee test_output.json
      #- aws s3 cp test_output.json s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/results.json
  - name: Validation
    environment:
      MPIEXEC_PATH: /usr/bin/mpiexec
      NONMEMROOT: /opt/NONMEM
      NMVERSION: nm74gf
      NONMEM_LICENSE:
        from_secret: NONMEM_LICENSE
    commands:
      - git clone https://github.com/metrumresearchgroup/goProjectValidator.git
      - cd goProjectValidator/cmd/pvgo
      - go build -o gpv main.go
      - cp gpv /usr/local/bin
      - cp ../../../validation.json .
      - ls -larth
      - mkdir testoutput
      - mkdir rendered
     # - aws s3 cp s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/results.json testoutput/results.json
      - ./gpv --scenarioFile validation.json --testsDirectory testoutput --outputDirectory rendered
     # - aws s3 cp rendered/specification.md s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/specification.md
     # - aws s3 cp rendered/testing_and_validation.md s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/testing_and_validation.md
     # - aws s3 cp rendered/traceability_matrix.md s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/traceability_matrix.md
volumes:
  - name: nonmem
    host:
      path: /opt/NONMEM
  - name: tmp
    host:
      path: /tmp