  name: BabylonTesting
  type: docker
  kind: pipeline
  steps:
    - name: pull core image
      image: omerxx/drone-ecr-auth
      volumes:
        - name: docker.sock
          path: /var/run/docker.sock
      commands:
        - $(aws ecr get-login --no-include-email --region us-east-1)
        - docker pull 906087756158.dkr.ecr.us-east-1.amazonaws.com/nonmem
    - name: Build updated image
      image: omerxx/drone-ecr-auth
      commands:
        - docker build -t "nmtest" .
      volumes:
        - name: docker.sock
          path: /var/run/docker.sock
    - name: Test
      environment:
        MPIEXEC_PATH: /usr/bin/mpiexec
        NONMEMROOT: /opt/NONMEM
        NMVERSION: nm74gf
        NONMEM_LICENSE:
          from_secret: NONMEM_LICENSE
      image: nmtest
      pull: never
      commands:
        - echo "$NONMEM_LICENSE" > /opt/NONMEM/nm74gf/license/nonmem.lic
        - echo $(pwd) > HOMEDIR
        - cd /tmp/babylontest
        - go test ./... -v --json | tee test_output.json
        - aws s3 cp test_output.json s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/results.json
    - name: Validation
      environment:
        MPIEXEC_PATH: /usr/bin/mpiexec
        NONMEMROOT: /opt/NONMEM
        NMVERSION: nm74gf
        NONMEM_LICENSE:
          from_secret: NONMEM_LICENSE
      image: nmtest
      pull: never
      commands:
        - git clone https://github.com/metrumresearchgroup/goProjectValidator.git
        - cd goProjectValidator/cmd/pvgo
        - go build -o gpv main.go
        - cp gpv /usr/local/bin
        - cp ../../../validation.json .
        - ls -larth
        - mkdir testoutput
        - mkdir rendered
        - aws s3 cp s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/results.json testoutput/results.json
        - gpv --scenarioFile validation.json --testsDirectory testoutput --outputDirectory rendered
        - aws s3 cp rendered/specification.md s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/specification.md
        - aws s3 cp rendered/testing_and_validation.md s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/testing_and_validation.md
        - aws s3 cp rendered/traceability_matrix.md s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/traceability_matrix.md
  trigger:
    event:
      - push
  volumes:
    - name: docker.sock
      host:
        path: /var/run/docker.sock

---
  name: tagged releases
  kind: pipeline
  type: docker
  steps:
    - name: goreleaser
      image: goreleaser/goreleaser
      environment:
        VERSION: ${DRONE_TAG}
        #Forcing DBN to be empty such that we don't set it for hte LDFLags
        DRONE_BUILD_NUMBER: ""
        GITHUB_TOKEN:
          from_secret: GITHUB_TOKEN
      commands:
        - git config --global user.email "drone@metrumrg.com"
        - git config --global user.name "Drony"
        - git fetch --tags
        - cd cmd/bbi
        - goreleaser --rm-dist
  trigger:
    event:
      - tag
    status:
      - success
