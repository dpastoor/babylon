  name: BabylonTesting
  type: docker
  kind: pipeline
  steps:
    - name: pull core image
      image: omerxx/drone-ecr-auth
      volumes:
        - name: docker.sock
          path: /var/run/docker.sock
      commands:
        - $(aws ecr get-login --no-include-email --region us-east-1)
        - docker pull 906087756158.dkr.ecr.us-east-1.amazonaws.com/nonmem
    - name: Build updated image
      image: omerxx/drone-ecr-auth
      commands:
        - docker build -t "nmtest" .
      volumes:
        - name: docker.sock
          path: /var/run/docker.sock
    - name: Test
      environment:
        MPIEXEC_PATH: /usr/bin/mpiexec
        NONMEMROOT: /opt/NONMEM
        NMVERSION: nm74gf
        NONMEM_LICENSE:
          from_secret: NONMEM_LICENSE
      image: nmtest
      pull: never
      commands:
        - echo "$NONMEM_LICENSE" > /opt/NONMEM/nm74gf/license/nonmem.lic
        - cd /tmp/babylontest
        - go test ./... -v --json | tee test_output.json
        - aws s3 cp test_output.json s3://babylon-validation/babylon/${DRONE_COMMIT_BRANCH}/${DRONE_BUILD_NUMBER}/results.json
    - name: Validation
      environment:
        MPIEXEC_PATH: /usr/bin/mpiexec
        NONMEMROOT: /opt/NONMEM
        NMVERSION: nm74gf
        NONMEM_LICENSE:
          from_secret: NONMEM_LICENSE
      image: nmtest
      pull: never
      commands:
        - git clone https://github.com/metrumresearchgroup/goProjectValidator.git
        - go build -o gpv goProjectValidator/cmd/pvgo/main.go
        - cp gpv /usr/local/bin
        - mkdir testoutput
        - mkdir rendered
        - cp test_output.json testoutput
        - gpv --scenarioFile validation.json --testsDirectory testoutput --outputDirectory rendered
  trigger:
    event:
      - push


  volumes:
    - name: docker.sock
      host:
        path: /var/run/docker.sock